using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;

namespace Artificial_Earth_Models_Satelite
{
    class AnomalyPointsMassModel : SphereFunctionModel
    {
        //private double t0;
        //private double tk;
        //private Vector y = new Vector(6);
        //private Vector y0 = new Vector(6);
        Vector dg = new Vector(3);

        
        public AnomalyPointsMassModel(Vector o_V_Y, Vector o_V_Y0, double d_t0, double d_tk):base(o_V_Y,o_V_Y0,d_t0,d_tk)
        {
            //y.equal(o_V_Y);
            //y0.equal(o_V_Y0);
            //t0 = d_t0;
            //tk = d_tk;
        }

       

        private const double mu = 398600.436e9; //3.98600544 * 100000000000000;//

        public override void Init(ref Vector I_y, ref Vector I_y0, ref double I_t0, ref double I_tk)
        {
            I_t0 = t0;
            I_tk = tk;
            I_y = new Vector(o_y.RowsCount);
            I_y0 = new Vector(y0.RowsCount);

            for (int i = 0; i < o_y.RowsCount; i++)
            {
                I_y[i] = o_y[i];
                I_y0[i] = y0[i];
            }

        }

        void AnomalCount(Vector v_y , Vector dg)
        {
            //StreamReader r_mass = new StreamReader(@"mass.txt");
            //StreamReader r_X = new StreamReader(@"X.txt");
            //StreamReader r_Y = new StreamReader(@"Y.txt");
            //StreamReader r_Z = new StreamReader(@"Z.txt");

            double[] massPoints = new double[60] {-1917861.343e10, -7649.811e10, 
            -23204717.367e10 , -8601525.203e10 , -39262968.108e10 , -37656928.613e10 , 
            55417.233e10 , -1122388.574e10 , 11553321.883e10 , -3212166.768e10,
            -127570.128e10 , 537718.408e10 , 159431.526e10, -9621707.493e10 , 14954047.019e10,
            -1454978.047e10 , 12173.463e10 , 6235318.028e10 , -4022993.036e10 , -13233537.348e10,
            -837955.460e10 , 66944.487e10 , 9533469.996e10 , 13126.101e10 , 133490487.677e10,
            11202.018e10, -8306318.912e10 , 1563860.673e10 , -4110249.075e10, -708432.828e10,
            115758.347e10 , 47117.768e10 , 3060709.563e10 , 125694.630e10 , -19909835.138e10,
            -25600026.158e10 , 8998492.144e10 , 6460340.213e10 , 22635646.931e10 , 14963823.854e10,
            104200607.824e10, -29025.051e10 , -25923827.511e10 , 4710.121e10 , -72296468.140e10,
            11488188.566e10 , 30871.376e10 , -6821341.595e10 , 4053215.384e10 , 2364380.549e10,
            -5107799.845e10 , 1152914.935e10 , 14079228.613e10 , 24148.390e10, 14981240.134e10,
            -7746811.230e10, -52402113.809e10 , -9702053.744e10 , 6998066.913e10 , -11022424.436e10};

            double[] X = new double[60] {-1597.53455e3 , 5243.88105e3 , -694.74764e3 , 597.26083e3 ,
            1472.01984e3 , -1395.72710e3 , -4729.43278e3 , 1613.74542e3 , -737.33302e3 , -3498.93844e3,
            2443.27977e3 , 1399.38281e3 , -1807.95598e3 , 500.99426e3 , 564.56372e3 , -3606.22095e3,
            3494.94521e3 , 2819.10268e3 , 830.78873e3 , -2407.50792e3 , 2745.40696e3 , 474.28039e3,
            -1675.28817e3 , 1951.39223e3 , -1131.17750e3 , 4552.11518e3 , 32.85983e3, -3588.59466e3,
            -1688.88208e3 , 142.71007e3 , -2583.62219e3 , -4410.11412e3 , -3512.99151e3, 2887.19498e3,
            -1221.99104e3, -795.89525e3 , -859.93100e3 , 134.47321e3 , 2030.13210e3 , -894.96828e3,
            1424.84214e3 , 3640.95418e3 , -1666.65137e3 , -2926.62377e3 , 1704.30580e3 , -1329.71266e3,
            2993.13075e3 , 539.11732e3 , 520.10547e3 , -1696.20051e3 , -2806.42940e3 , 1613.29970e3,
            1331.61419e3 , 2240.63930e3 , -523.57471e3 , 2751.33446e3 , 490.27870e3 , 214.47365e3, 43.26692e3 , -1649.80829e3};

            double[] Y = new double[60] {3389.08854e3 , 2173.09105e3 , -2543.95209e3 , 4124.29275e3, 2496.13550e3,
            522.57926e3 , 241.06220e3 , -1389.46971e3 , 4223.69658e3 , 2123.53095e3 , -2075.43783e3 , -2714.24422e3,
            4038.16007e3 , 2417.51767e3 , 4169.62120e3 , 2202.63232e3 , -2225.41218e3 , 1215.19399e3, 1187.36734e3,
            -987.75326e3 , 3312.38455e3 , 1205.35801e3 , -797.14875e3 , -5027.13641e3 , -625.93077e3 , 1485.42650e3,
            1869.79667e3 , 2192.00472e3, -2509.59158e3 , -2365.17339e3 , 3876.78111e3 , -1491.17613e3 , 2136.54197e3,
            -1520.35002e3, -1430.21334e3, 4094.06397e3 , -2675.58249e3 , -3777.76920e3 , 2786.99103e3 , 3946.71389e3,
            2420.76271e3 , 2890.38428e3 , -1236.38163e3 , 1305.39588e3 , 2570.01705e3 , -1480.67585e3 , -3221.87772e3,
            4204.18554e3 , -3574.66707e3 , 1611.26783e3 , 90.03200e3 , -1398.25374e3 , -1428.22398e3 , 2260.34015e3,
            -2437.64320e3, 1231.49383e3 , -1222.02040e3 , -3717.91494e3 , 1953.11104e3 , -755.81754e3};

            double[] Z = new double[60] {-1206.07844e3 , 31.67769e3, 3010.82934e3 , 3032.72188e3 , 2305.68074e3 , 1219.80230e3,
            -1386.75430e3, -4742.37198e3, -89.84823e3 , -2780.28445e3, -3115.11405e3 , -1999.26660e3 , -1984.43463e3,
            2081.23547e3 , 3107.28151e3 , 2555.27655e3 , 3504.56634e3 , 3031.84264e3 , 2665.51499e3 , 1168.97751e3 ,
            561.61201e3 , -4546.03756e3 , -3048.67319e3 , -1609.06073e3 , 614.81653e3 , -1997.43144e3 , -2877.64543e3,
            2532.32304e3 , 997.39780e3 , 3559.90481e3 , -1530.49081e3 , 1951.16572e3 , -2789.00902e3 , -2929.00588e3 ,
            2886.63494e3 , -148.43103e3 , 3049.08749e3 , -737.29613e3 , 1094.12609e3 , -241.43049e3 , 1954.22532e3 , 
            -1299.38754e3 , -177.16683e3 , 4683.40996e3 , 1437.94150e3 , 3122.43463e3 , 2310.62018e3 , 3168.98432e3,
            -271.75382e3 , 2166.50206e3 , -437.20618e3 , -4728.63714e3 , 234.32978e3 , -3797.81205e3 , 3040.87357e3,
            2975.90618e3 , 299.60165e3 , -621.72796e3 , -2943.24995e3 , -2992.38699e3};


           

            //for (int i = 0; i < Z.Length; i++)
            //{
            //    massPoints[i] = Convert.ToDouble(r_mass.ToString().Replace(" ","")) / 1e10;
            //    X[i] = Convert.ToDouble(r_X.ReadLine());
            //    Y[i] = Convert.ToDouble(r_Y.ReadLine());
            //    Z[i] = Convert.ToDouble(r_Z.ReadLine());
            //}


            double d_x=0, d_y=0, d_z=0 ,d_r=0;

            for (int i = 0; i < massPoints.Length; i++)
            {
                massPoints[i] = massPoints[i] / 1e20;
                
            }

                for (int i = 0; i < massPoints.Length; i++)
                {
                    d_r = Math.Sqrt(Math.Pow(v_y[0] - X[i], 2) + Math.Pow(v_y[2] - Y[i], 2) + Math.Pow(v_y[4] - Z[i], 2));
                    d_r = Math.Pow(d_r, 3);
                    d_x += massPoints[i] * (v_y[0] - X[i]) / d_r;
                    d_y += massPoints[i] * (v_y[2] - Y[i]) / d_r;
                    d_z += massPoints[i] * (v_y[4] - Z[i]) / d_r;
                }
            dg[0] = -mu * d_x;
            dg[1] = -mu * d_y;
            dg[2] = -mu * d_z;

        }

        public override void Func(Vector v_y, Vector dydx, double x)
        {

       
          
            AnomalCount(v_y, dg);
          
             


            double r = Math.Pow(Math.Pow(v_y[0], 2) + Math.Pow(v_y[2], 2) + Math.Pow(v_y[4], 2), 1.5);
            dydx[0] = v_y[1];//dx=a
            dydx[1] = (-v_y[0] * mu / r) + dg[0];//da=-mu*(x/|r|^3)

            dydx[2] = v_y[3];//dy=b;
            dydx[3] = (-v_y[2] * mu / r) + dg[1];//db=-mu*(y/|r|^3)

            dydx[4] = v_y[5];//dz=c
            dydx[5] = (-v_y[4] * mu / r) + dg[2];//dc=-mu*(c/|r|^3)

         
                FigureOut(v_y, dydx);
                dydx[1] += dg[0];
                dydx[3] += dg[1];
                dydx[5] += dg[2];
           
        }
    }
}
